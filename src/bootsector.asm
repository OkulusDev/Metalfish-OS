; -----------------------------------------------------------------------------
;  Metalfish OS source code
;  File: bootsector.asm
;  Title: Loop bootloader (bootsector)
;  Last Change Date: 29 October 2023, 13:08 (UTC)
;  Author: Okulus Dev
;  License: GNU GPL v3
; -----------------------------------------------------------------------------
; Description:
;  Говорим BIOS, что данное устройство - загрузочное, что здесь установлен
;   загрузочный сектор
;  Чтобы вывести символ на экран, мы воспользуемся "scrolling tele-type BIOS
;	routine", то есть специальной рутиной BIOS, которая выводит символ на экран
;	и перемещает курсор, чтобы быть готовым напечатать следующий символ. Чтобы 
;	воспользоваться этой рутиной, нужно переместить в регистр ah число 0x0e, 
;	а также использовать прерывания (синтаксис прерываний в ассемблере - 
;	"int <номер прерывания>"). Прерывания - это механизм, с помощью которого 
;	процессор может быть прерван от выполнения того, чем он сейчас занят, чтобы 
;	выполнить какую-то другую команду. Мы будем использовать прерывание 0x10 
;	(это число - индекс обработчика прерывания в ISR (interrupt service 
;	routines). ISR это последовательность команд, ответсвенных за прерывание. 
;	Нам нужна команда под индексом 0x10), функцией которого является 
;	предоставление графических сервисов, вывод строк на экран и т.д.
; -----------------------------------------------------------------------------

; Указываем BIOS'у, что нам нужна рутина tele-type
mov ah, 0x0e

; Перемещаем ascii-код символа в регистр al, и вызываем прерывание 0x10, которое
; выводит символ из регистра al
mov al, 'M'
int 0x10
mov al, 'e'
int 0x10
mov al, 't'
int 0x10
mov al, 'a'
int 0x10
mov al, 'l'
int 0x10
mov al, 'f'
int 0x10
mov al, 'i'
int 0x10
mov al, 's'
int 0x10
mov al, 'h'
int 0x10
mov al, 'O'
int 0x10
mov al, 'S'
int 0x10

jmp $										; переходим к началу строки 

times 510-($-$$) db 0						; заполняем ненужные байты нулями

dw 0xaa55									; магическое число BIOS

